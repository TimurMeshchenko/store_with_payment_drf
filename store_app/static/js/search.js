const searchInput=document.getElementById("searchInput");const autocomplete_element=document.querySelector(".autocomplete");searchInput.addEventListener("input",(async()=>await listen_search()));searchInput.addEventListener("click",(async()=>await listen_search()));document.addEventListener("click",remove_autocomplete);async function listen_search(){const input_value=searchInput.value;const products=await get_matched_products(input_value);displaySuggestions(products);await listen_suggestions_click()}async function get_matched_products(input_value){const response=await fetch(`${window.location.href}/api/get_products_by_search?product_name=${input_value}`);const product_dict=await response.json();const products=product_dict["products"];return products}function displaySuggestions(products){autocomplete_element.innerHTML=get_autocomplete_content();const autocomplete_list=autocomplete_element.querySelector("ul");products.forEach((product=>{const item=get_autocomplete_item(product);autocomplete_list.insertAdjacentHTML("beforeend",item)}))}function get_autocomplete_content(){return`\n            <div class="autocomplete__content">\n                <div class="autocomplete__scroll-container">\n                    <ul class="autocomplete__list autocomplete__list--grouped" data-jsv-df="">                                        \n                    </ul>\n                </div>\n            </div>\n    `}function get_autocomplete_item(product){return`\n        <li data-nm-id="${product.id}" class="autocomplete__item j-suggest autocomplete__item--category"\n            data-link="class{merge: selected toggle='selected'}" data-type="category">\n            <p class="autocomplete__text"> <span class="autocomplete__phrase">${product.name}</span>\n            </p> <img class="autocomplete__category-logo"\n                src=${product.image} width="36"\n                height="48">\n        </li>    \n    `}async function listen_suggestions_click(){const suggestions=document.querySelectorAll(".autocomplete__item");suggestions.forEach((suggestion=>{suggestion.addEventListener("click",(async()=>{autocomplete_element.innerHTML="";await handle_product_click(suggestion)}))}))}function remove_autocomplete(event){const is_clicked_outside_autocomplete=autocomplete_element&&!autocomplete_element.contains(event.target);if(is_clicked_outside_autocomplete){autocomplete_element.innerHTML=""}}